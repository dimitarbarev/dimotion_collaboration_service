name: CI for Collaboration Service

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      SPRING_RABBITMQ_HOST: ${{ secrets.SPRING_RABBITMQ_HOST }}
      SPRING_RABBITMQ_PORT: ${{ secrets.SPRING_RABBITMQ_PORT }}
      SPRING_RABBITMQ_USERNAME: ${{ secrets.SPRING_RABBITMQ_USERNAME }}
      SPRING_RABBITMQ_PASSWORD: ${{ secrets.SPRING_RABBITMQ_PASSWORD }}
      AUTH0_ISSUER_URI: ${{ secrets.AUTH0_ISSUER_URI }}
      AUTH0_JWKS_URI: ${{ secrets.AUTH0_JWKS_URI }}
      COLLAB_DATASOURCE_URL: ${{ secrets.COLLAB_DATASOURCE_URL }}
      COLLAB_DATASOURCE_USERNAME: ${{ secrets.COLLAB_DATASOURCE_USERNAME }}
      COLLAB_DATASOURCE_PASSWORD: ${{ secrets.COLLAB_DATASOURCE_PASSWORD }}
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Build Docker image
        run: docker build -t collab-service:latest .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: collab-service:latest
          format: table
          ignore-unfixed: true
          exit-code: 0

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-path=gitleaks.json --report-format=json

  semgrep-scan:
    name: Semgrep Code Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Collaboration Service"
          path: "."
          format: "HTML"
          out: "dependency-check-report"

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report

  zap-scan:
    name: OWASP ZAP Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok jq wget

      - name: Start ngrok tunnel to local backend
        env:
          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
        run: |
          ngrok config add-authtoken "$NGROK_TOKEN"
          ngrok http 8083 > ngrok.log &
          sleep 10
          curl -s http://127.0.0.1:4040/api/tunnels \
            | jq -r .tunnels[0].public_url \
            | sed 's/http:/https:/' \
            > ngrok_url.txt

      - name: Run ZAP Baseline Scan using official Docker image
        run: |
          export TARGET=$(cat ngrok_url.txt)
          docker run --rm -v $(pwd):/zap/wrk \
            zaproxy/zap-stable zap-baseline.py \
            -t "$TARGET" -r zap_report.html -w /zap/wrk || true

      - name: Upload ZAP report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
